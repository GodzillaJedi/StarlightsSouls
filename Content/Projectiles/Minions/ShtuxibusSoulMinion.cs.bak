using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;
using CalamityMod;
using CalamityMod.NPCs.PlaguebringerGoliath;
using CalamityMod.Projectiles.Melee;
using CalamityMod.Projectiles.Summon;
using CalamityMod.Sounds;
using ssm.Content.Items;
using ssm.Content.Projectiles;
using ssm.Content.Projectiles.Minions;

namespace ssm.Content.Projectiles.Minions
{
    public class ShtuxibusSoulMinion : ModProjectile
    {
        private int idealpos = 1;
        public override string Texture => "ssm/Content/Projectiles/Minions/ShtuxibusSoulMinion";
		private readonly Mod fargosouls = ModLoader.GetMod("FargowiltasSouls");
		private readonly Mod calamity = ModLoader.GetMod("CalamityMod");
        public override void SetStaticDefaults()
        {
            Main.projFrames[Projectile.type] = 4;
            ProjectileID.Sets.TrailCacheLength[Projectile.type] = 6;
            ProjectileID.Sets.TrailingMode[Projectile.type] = 2;
            ProjectileID.Sets.CultistIsResistantTo[Projectile.type] = true;
        }

       public override void SetDefaults()
        {
            Projectile.width = 34;
            Projectile.height = 50;
            Projectile.ignoreWater = true;
            Projectile.tileCollide = false;
            Projectile.DamageType = DamageClass.Summon;
            Projectile.friendly = true;
            Projectile.minion = true;
            Projectile.penetrate = -1;
            Projectile.tileCollide = false;
            Projectile.ignoreWater = true;
            Projectile.aiStyle = -1;
            Projectile.netImportant = true;
            Projectile.usesLocalNPCImmunity = true;
            Projectile.localNPCHitCooldown = 0;}

	// public override void AI()
	// 	{
	// 		Player val = Main.player[Projectile.owner];
	// 		ShtunPlayer modPlayer = val.GetModPlayer<ShtunPlayer>();
		
	// 		if (Projectile.type == ModContent.ProjectileType<DevaMinion>())
	// 		{
		
	// 			if (val.dead)
	// 			{
	// 				modPlayer.ShtuxibusMinionBuff = false;
	// 			}
	// 			if (modPlayer.ShtuxibusMinionBuff)
	// 			{
	// 				Projectile.timeLeft = 2;
	// 			}
	// 		}
	// 		if (val.HasMinionAttackTargetNPC)
	// 		{
	// 			NPC val2 = Main.npc[val.MinionAttackTargetNPC];
	// 			Projectile.direction = ((!(((Entity)val2).Center.X - Projectile.Center.X >= 0f)) ? 1 : (-1));
	// 			Projectile.spriteDirection = ((!(((Entity)val2).Center.X - Projectile.Center.X >= 0f)) ? 1 : (-1));
	// 			Projectile.localAI[0] += 1f;
	// 			if (Projectile.localAI[0] < 300f)
	// 			{
	// 				Projectile.localAI[1] += 1f;
				
	// 				if (Main.myPlayer == Projectile.owner && Projectile.localAI[1] >= 30f)
	// 				{
						
					
	// 					int num = Projectile.NewProjectile(Projectile.GetSource_FromThis(), Projectile.Center, new Vector2((float)Main.rand.Next(-30, 30), (float)Main.rand.Next(-30, 30)), ModContent.Find<ModProjectile>(fargosouls.Name, "HentaiSpearThrown").Type, (int)((float)Projectile.damage * 0.2f), 0f, Projectile.owner, 0f, 0f, 0f);//cosmicBlast
	// 					if (Utils.IndexInRange<Projectile>(Main.projectile, num))
	// 					{
	// 						Main.projectile[num].originalDamage = (int)((float)Projectile.damage * 0.2f);
	// 					}

	// 					Projectile.localAI[1] = 0f;
	// 				}
	// 			}
	// 			else if (Projectile.localAI[0] >= 300f && Projectile.localAI[0] < 600f)
	// 			{
	// 				if (Projectile.localAI[0] == 300f)
	// 				{
	// 					Projectile.localAI[1] = 0f;
	// 				}
	// 				Projectile.localAI[1] += 1f;
	// 				Projectile.frame = 1;
	// 				int num2 = 1;
	// 				float num3 = 1.2f;
	// 				float num4 = 420f * (float)Projectile.spriteDirection;
	// 				float num5 = 0f;
	// 				Vector2 val3 = new Vector2(Projectile.position.X + Projectile.width * 0.5f, Projectile.position.Y + Projectile.height * 0.5f);
					
	// 				float num6 = ((Entity)val2).position.X + (float)(((Entity)val2).width / 2) + (float)num2 * num4 - val3.X;
	// 				float num7 = ((Entity)val2).position.Y + (float)(((Entity)val2).height / 2) + num5 - val3.Y;
	// 				float num8 = (float)Math.Sqrt(num6 * num6 + num7 * num7);
	// 				num8 = 25f / num8;
	// 				num6 *= num8;
	// 				num7 *= num8;
	// 				if (Projectile.velocity.X < num6)
	// 				{
	// 					Projectile.velocity.X += num3;
	// 					if (Projectile.velocity.X < 0f && num6 > 0f)
	// 					{
	// 						Projectile.velocity.X += num3;
	// 					}
	// 				}
	// 				else if (Projectile.velocity.X > num6)
	// 				{
	// 					Projectile.velocity.X -= num3;
	// 					if (Projectile.velocity.X > 0f && num6 < 0f)
	// 					{
	// 						Projectile.velocity.X -= num3;
	// 					}
	// 				}
	// 				if (Projectile.velocity.Y < num7)
	// 				{
	// 					Projectile.velocity.Y += num3;
	// 					if (Projectile.velocity.Y < 0f && num7 > 0f)
	// 					{
	// 						Projectile.velocity.Y += num3;
	// 					}
	// 				}
	// 				else if (Projectile.velocity.Y > num7)
	// 				{
	// 					Projectile.velocity.Y -= num3;
	// 					if (Projectile.velocity.Y > 0f && num7 < 0f)
	// 					{
	// 						Projectile.velocity.Y -= num3;
	// 					}
	// 				}
	// 				if (!(Projectile.localAI[1] >= 90f))
	// 				{
	// 					return;
	// 				}

	// 				Vector2 val4 = default(Vector2);
	// 				for (int i = 0; i < 12; i++)
	// 				{
	// 					double num9 = (double)(30 * i) * (Math.PI / 180.0);
	// 					double num10 = 200.0;
	// 					val4.X = ((Entity)val2).Center.X - (float)(int)(Math.Cos(num9) * num10) - 4f;
	// 					val4.Y = ((Entity)val2).Center.Y - (float)(int)(Math.Sin(num9) * num10) - 4f;
	// 					Vector2 val5 = ((Entity)val2).Center - val4;
	// 					val5.Normalize();
	// 					int num11 = Projectile.NewProjectile(Projectile.GetSource_FromAI(), val4, val5 * 15f, ModContent.Find<ModProjectile>(fargosouls.Name, "HentaiSpearThrown").Type, (int)((float)Projectile.damage * 0.05f), 0f, Main.myPlayer, 0f, 0f, 0f);//ENDOICESHARD
						
					
	// 					Projectile.localAI[1] = 0f;
	// 				}
	// 			}
	// 			else if (Projectile.localAI[0] >= 600f && Projectile.localAI[0] < 900f)
	// 			{
	// 				if (Projectile.localAI[0] == 600f)
	// 				{
	// 					Projectile.localAI[1] = 0f;
	// 				}
	// 				Projectile.localAI[1] += 1f;
	// 				Projectile.frame = 0;
	// 				float num12 = MathHelper.Lerp(Projectile.position.X, ((Entity)val2).position.X + (float)(500 * idealpos), 0.1f);
	// 				float num13 = MathHelper.Lerp(Projectile.position.Y, ((Entity)val2).position.Y - 200f, 0.1f);
	// 				Projectile.position = new Vector2(num12, num13);
	// 				if (Main.myPlayer == Projectile.owner && Projectile.localAI[1] % 20f == 0f)
	// 				{
	// 					int num14 = Projectile.NewProjectile(Projectile.GetSource_FromAI(), new Vector2(((Entity)val2).Center.X + (float)Main.rand.Next(-64, 64), ((Entity)val2).Center.Y + 200f), new Vector2((float)Main.rand.Next(-20, 20), -40f), ModContent.Find<ModProjectile>(fargosouls.Name, "HentaiSpearThrown").Type, (int)((float)Projectile.damage * 0.2f), 0f, Main.myPlayer, 0f, 0f, 0f);//DNA
	// 					int num15 = Projectile.NewProjectile(Projectile.GetSource_FromAI(), new Vector2(((Entity)val2).Center.X + (float)Main.rand.Next(-16, 16), ((Entity)val2).Center.Y + 200f), new Vector2((float)Main.rand.Next(-20, 20), -40f), ModContent.Find<ModProjectile>(fargosouls.Name, "HentaiSpearThrown").Type, (int)((float)Projectile.damage * 0.2f), 0f, Main.myPlayer, 0f, 0f, 0f);//DNA
	// 					if (Utils.IndexInRange<Projectile>(Main.projectile, num14))
	// 					{
	// 						Main.projectile[num14].originalDamage = Projectile.originalDamage;
	// 					}
	// 					if (Utils.IndexInRange<Projectile>(Main.projectile, num15))
	// 					{
	// 						Main.projectile[num15].originalDamage = Projectile.originalDamage;
	// 					}
						
						
	// 				}
	// 				if (Projectile.localAI[1] % 60f == 0f)
	// 				{
			
	// 					idealpos *= -1;
	// 				}
	// 			}
	// 			else if (Projectile.localAI[0] >= 900f && Projectile.localAI[0] < 1200f)
	// 			{
	// 				if (Projectile.localAI[0] == 900f)
	// 				{
	// 					Projectile.localAI[1] = 0f;
	// 				}
	// 				Projectile.localAI[1] += 1f;
	// 				Projectile.frame = 1;
	// 				int num16 = 1;
	// 				float num17 = 1.2f;
	// 				float num18 = 520f * (float)Projectile.spriteDirection;
	// 				float num19 = 0f;
	// 				Vector2 val6 = new Vector2(Projectile.position.X + Projectile.width * 0.5f, Projectile.position.Y + Projectile.height * 0.5f);
				
	// 				float num20 = ((Entity)val2).position.X + (float)(((Entity)val2).width / 2) + (float)num16 * num18 - val6.X;
	// 				float num21 = ((Entity)val2).position.Y + (float)(((Entity)val2).height / 2) + num19 - val6.Y;
	// 				float num22 = (float)Math.Sqrt(num20 * num20 + num21 * num21);
	// 				num22 = 25f / num22;
	// 				num20 *= num22;
	// 				num21 *= num22;
	// 				if (Projectile.velocity.X < num20)
	// 				{
	// 					Projectile.velocity.X += num17;
	// 					if (Projectile.velocity.X < 0f && num20 > 0f)
	// 					{
	// 						Projectile.velocity.X += num17;
	// 					}
	// 				}
	// 				else if (Projectile.velocity.X > num20)
	// 				{
	// 					Projectile.velocity.X -= num17;
	// 					if (Projectile.velocity.X > 0f && num20 < 0f)
	// 					{
	// 						Projectile.velocity.X -= num17;
	// 					}
	// 				}
	// 				if (Projectile.velocity.Y < num21)
	// 				{
	// 					Projectile.velocity.Y += num17;
	// 					if (Projectile.velocity.Y < 0f && num21 > 0f)
	// 					{
	// 						Projectile.velocity.Y += num17;
	// 					}
	// 				}
	// 				else if (Projectile.velocity.Y > num21)
	// 				{
	// 					Projectile.velocity.Y -= num17;
	// 					if (Projectile.velocity.Y > 0f && num21 < 0f)
	// 					{
	// 						Projectile.velocity.Y -= num17;
	// 					}
	// 				}
	// 				if (Projectile.localAI[1] % 60f == 0f)
	// 				{
					
	// 					Vector2 val7 = ((Entity)val2).Center - Projectile.Center;
	// 					val7.Normalize();
	// 					Vector2 val8 = val7 * 10f;
	// 					Vector2 val9 = new Vector2(Projectile.Center.X + (float)(120 * -Projectile.spriteDirection), Projectile.Center.Y - 60f);
						
	// 					int num23 = Projectile.NewProjectile(Projectile.GetSource_FromThis(), val9, val8, ModContent.Find<ModProjectile>(fargosouls.Name, "HentaiSpearThrown").Type, Projectile.damage * 2, 0f, Projectile.owner, 0f, 0f, 0f);//Planet
	// 					if (Utils.IndexInRange<Projectile>(Main.projectile, num23))
	// 					{
	// 						Main.projectile[num23].originalDamage = Projectile.originalDamage;
	// 					}
	// 				//	Main.projectile[num23].set_DamageType(DamageClass.Summon);
	// 					Main.projectile[num23].tileCollide = false;
						
	// 					Projectile.netUpdate = true;
	// 				}
	// 			}
	// 			else
	// 			{
	// 				Projectile.frame = 0;
	// 				Projectile.localAI[1] = 0f;
	// 				Projectile.localAI[0] = 0f;
	// 			}
	// 		}
	// 		else
	// 		{
	// 			Projectile.FloatingPetAI(faceRight: false, 0.02f);
	// 			Projectile.localAI[0] = 0f;
	// 			Projectile.localAI[1] = 0f;
	// 			Projectile.frame = 0;
	// 		}
	// 	}

        public override void AI()
        {
            Projectile.scale = 1;

            Player player = Main.player[Projectile.owner];
            if (player.active && !player.dead && player.GetModPlayer<ShtunPlayer>().ShtuxibusMinionBuff)
            Projectile.timeLeft = 2;
            if (Projectile.ai[0] >= 0 && Projectile.ai[0] < Main.maxNPCs) //has target
            {
                NPC minionAttackTargetNpc = Projectile.OwnerMinionAttackTargetNPC;
                if (minionAttackTargetNpc != null && Projectile.ai[0] != minionAttackTargetNpc.whoAmI && minionAttackTargetNpc.CanBeChasedBy())
                Projectile.ai[0] = minionAttackTargetNpc.whoAmI;
                NPC npc = Main.npc[(int)Projectile.ai[0]];
                if (npc.CanBeChasedBy(Projectile))
                {
                    Projectile.direction = Projectile.spriteDirection = Projectile.Center.X > npc.Center.X ? 1 : -1;
                    Vector2 targetPos = npc.Center + Projectile.DirectionFrom(npc.Center) * 600;
                    Projectile.localAI[1]++;
                    Projectile.localAI[0]++;
                    if (Projectile.Distance(targetPos) > 70)
                        Movement(targetPos, 1f);
                    if (Projectile.localAI[0] > 15 && Projectile.localAI[1] < 300)
                    {
                        Projectile.localAI[0] = 0;
                        if (Projectile.owner == Main.myPlayer)
                            Projectile.NewProjectile(Projectile.GetSource_FromThis(), Projectile.Center, Projectile.velocity + Projectile.DirectionTo(npc.Center) * 30, ModContent.ProjectileType<ShtuxibusBullet>(), 700, Projectile.knockBack / 2, Projectile.owner, npc.whoAmI);}
                    else if (Projectile.localAI[0] > 50 && Projectile.localAI[1] < 600 && Projectile.localAI[1] > 300)
                    {
                        
                        Projectile.localAI[0] = 0;
                        if (Projectile.owner == Main.myPlayer)
                        
                            Projectile.NewProjectile(Projectile.GetSource_FromThis(), Projectile.Center, Projectile.velocity + Projectile.DirectionTo(npc.Center) * 30, ModContent.ProjectileType<ShtuxibusBullet>(), 700, Projectile.knockBack / 2, Projectile.owner, npc.whoAmI);
                    }
                          else if (Projectile.localAI[1] > 600)
                    {
                        Projectile.localAI[0] = 0;
                     Projectile.localAI[1] = 0;
                    }
                }
                else //forget target
                {
                    Projectile.ai[0] = ShtunUtils.FindClosestHostileNPCPrioritizingMinionFocus(Projectile, 1500);
                    Projectile.netUpdate = true;
                }
            }
            else //no target
            {
                Projectile.direction = Projectile.spriteDirection = Projectile.Center.X > player.Center.X ? 1 : -1;

                Vector2 targetPos = player.Center;
                if (player.velocity.X > 0)
                    targetPos.X -= 130;
                else if (player.velocity.X < 0)
                    targetPos.X += 130;
                else
                    targetPos.X += 130 * -player.direction;
                targetPos.Y -= 49;

                if (Projectile.Distance(targetPos) > 3000)
                    Projectile.Center = player.Center;
                else if (Projectile.Distance(targetPos) > 150)
                    Movement(targetPos, 1f);

                if (++Projectile.localAI[1] > 6){
                    Projectile.localAI[1] = 0;
                    Projectile.ai[0] = ShtunUtils.FindClosestHostileNPCPrioritizingMinionFocus(Projectile, 1500);
                    if (Projectile.ai[0] != -1)
                        Projectile.netUpdate = true;}}

            if (++Projectile.frameCounter > 4){
                Projectile.frameCounter = 0;
                if (++Projectile.frame >= 4)
                    Projectile.frame = 0;}}

        private void Movement(Vector2 targetPos, float speedModifier)
        {
            if (Projectile.Center.X < targetPos.X)
            {
                Projectile.velocity.X += speedModifier;
                if (Projectile.velocity.X < 0)
                    Projectile.velocity.X += speedModifier * 2;
            }
            else
            {
                Projectile.velocity.X -= speedModifier;
                if (Projectile.velocity.X > 0)
                    Projectile.velocity.X -= speedModifier * 2;
            }
            if (Projectile.Center.Y < targetPos.Y)
            {
                Projectile.velocity.Y += speedModifier;
                if (Projectile.velocity.Y < 0)
                    Projectile.velocity.Y += speedModifier * 2;
            }
            else
            {
                Projectile.velocity.Y -= speedModifier;
                if (Projectile.velocity.Y > 0)
                    Projectile.velocity.Y -= speedModifier * 2;
            }
            if (Math.Abs(Projectile.velocity.X) > 24)
                Projectile.velocity.X = 24 * Math.Sign(Projectile.velocity.X);
            if (Math.Abs(Projectile.velocity.Y) > 24)
                Projectile.velocity.Y = 24 * Math.Sign(Projectile.velocity.Y);
        }

        public override bool PreDraw(ref Color lightColor)
        {
            Texture2D texture2D13 = Terraria.GameContent.TextureAssets.Projectile[Projectile.type].Value;
            int num156 = Terraria.GameContent.TextureAssets.Projectile[Projectile.type].Value.Height / Main.projFrames[Projectile.type]; //ypos of lower right corner of sprite to draw
            int y3 = num156 * Projectile.frame; //ypos of upper left corner of sprite to draw
            Rectangle rectangle = new Rectangle(0, y3, texture2D13.Width, num156);
            Vector2 origin2 = rectangle.Size() / 2f;
            Color color26 = lightColor;
            color26 = Projectile.GetAlpha(color26);
            SpriteEffects effects = Projectile.spriteDirection > 0 ? SpriteEffects.None : SpriteEffects.FlipHorizontally;
            for (int i = 0; i < ProjectileID.Sets.TrailCacheLength[Projectile.type]; i++){
                Color color27 = Color.White * Projectile.Opacity * 0.75f * 0.5f;
                color27 *= (float)(ProjectileID.Sets.TrailCacheLength[Projectile.type] - i) / ProjectileID.Sets.TrailCacheLength[Projectile.type];
                Vector2 value4 = Projectile.oldPos[i];
                float num165 = Projectile.oldRot[i];
                Main.EntitySpriteDraw(texture2D13, value4 + Projectile.Size / 2f - Main.screenPosition + new Vector2(0, Projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), color27, num165, origin2, Projectile.scale, effects, 0);}
            Main.EntitySpriteDraw(texture2D13, Projectile.Center - Main.screenPosition + new Vector2(0f, Projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(rectangle), Projectile.GetAlpha(lightColor), Projectile.rotation, origin2, Projectile.scale, effects, 0);
            return false;}
        public override Color? GetAlpha(Color lightColor)
        {
            return Color.White * Projectile.Opacity * 0.75f;
        }
    
}}
