using Luminance.Core.Hooking;
using Microsoft.Xna.Framework.Graphics;
using MonoMod.Cil;
using MonoMod.RuntimeDetour;
using ReLogic.Content;
using System.Reflection;
using System;
using Terraria.GameContent.UI.Elements;
using Terraria;
using Terraria.ModLoader;
using Mono.Cecil.Cil;
using Microsoft.Xna.Framework;
using Terraria.UI;

namespace ssm.Core
{
    public readonly struct ModAsset<T>(Func<Asset<T>> assetLoadFunction) where T : class
    {
        private readonly Lazy<Asset<T>> asset = new Lazy<Asset<T>>(assetLoadFunction);

        public Asset<T> Asset => asset.Value;

        public bool Uninitialized => asset is null;

        public T Value => asset.Value.Value;

        public static ModAsset<T> FromPath(string path, AssetRequestMode requestMode = AssetRequestMode.AsyncLoad)
        {
            return new ModAsset<T>(() => ModContent.Request<T>(path, requestMode));
        }

        public static implicit operator T(ModAsset<T> asset) => asset.Value;
    }
    public class UIArbitraryDrawImage(UIArbitraryDrawImage.ImageDrawDelegate drawFunction, ModAsset<Texture2D> texture) : UIImage(texture)
    {
        protected ModAsset<Texture2D> textureAsset = texture;

        public readonly ImageDrawDelegate DrawFunction = drawFunction;

        public delegate void ImageDrawDelegate(Texture2D texture, Vector2 drawPosition, Rectangle? rectangle, Color color, float rotation, Vector2 origin, Vector2 scale);

        public override void Draw(SpriteBatch spriteBatch)
        {
            Texture2D texture = textureAsset.Value;
            CalculatedStyle dimensions = GetDimensions();
            if (ScaleToFit)
            {
                spriteBatch.Draw(texture, dimensions.ToRectangle(), Color);
                Vector2 scale = new Vector2(dimensions.Width, dimensions.Height) / texture.Size();
                DrawFunction(texture, dimensions.Position(), null, Color, 0f, Vector2.Zero, scale);
                return;
            }
            Vector2 size = texture.Size();
            Vector2 drawPosition = dimensions.Position() + size * (1f - ImageScale) * 0.5f + size * NormalizedOrigin;
            if (RemoveFloatingPointsFromDrawPosition)
                drawPosition = drawPosition.Floor();

            DrawFunction(texture, drawPosition, null, Color, Rotation, size * NormalizedOrigin, Vector2.One * ImageScale);
        }
    }

    public class ModIconSystem : ModSystem
    {
        private static UIArbitraryDrawImage ModIcon;

        private static Type? modItemUIType;
        public static ILHook OnInitializeHook
        {
            get;
            private set;
        }
        public override void OnModLoad()
        {
            modItemUIType = typeof(ModLoader).Assembly.GetType("Terraria.ModLoader.UI.UIModItem");
            MethodInfo? onInitializeMethod = modItemUIType?.GetMethod("OnInitialize", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance) ?? null;

            if (onInitializeMethod is not null)
            {
                new ManagedILEdit("Create Animated Icon", Mod, edit =>
                {
                    OnInitializeHook = new(onInitializeMethod, edit.SubscriptionWrapper);
                }, edit =>
                {
                    OnInitializeHook?.Undo();
                }, AnimateModIcon).Apply();
            }
            else
                ModContent.GetInstance<ssm>().Logger.Warn("Error applying custom mod icon.");
        }
        public override void OnModUnload() => OnInitializeHook?.Undo();

        private static void AnimateModIcon(ILContext context, ManagedILEdit edit)
        {
            if (modItemUIType is null)
                return;

            ILCursor cursor = new ILCursor(context);

            FieldInfo? modIconField = modItemUIType.GetField("_modIcon", BindingFlags.NonPublic | BindingFlags.Instance);
            PropertyInfo? modNameProperty = modItemUIType.GetProperty("ModName", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);

            if (modIconField is null)
            {
                edit.LogFailure("The _modIcon field could not be found.");
                return;
            }
            if (modNameProperty is null || modNameProperty.GetMethod is null)
            {
                edit.LogFailure("The ModName property could not be found.");
                return;
            }

            cursor.Emit(OpCodes.Ldarg_0);
            cursor.Emit(OpCodes.Call, modNameProperty.GetMethod);
            cursor.Emit(OpCodes.Ldarg_0);

            if (!cursor.TryGotoNext(MoveType.Before, i => i.MatchStfld(modIconField)))
            {
                edit.LogFailure("The _modIcon storage could not be found.");
                return;
            }

            cursor.Emit(OpCodes.Ldarg_0);
            cursor.Emit(OpCodes.Call, modNameProperty.GetMethod);

            cursor.EmitDelegate<Func<UIImage, string, UIImage>>((originalImage, modName) =>
            {
                if (modName == ModContent.GetInstance<ssm>().Name)
                    return GenerateModIcon();

                return originalImage;
            });
        }

        private static UIArbitraryDrawImage GenerateModIcon()
        {
            var dummyTexture = ModAsset<Texture2D>.FromPath("Terraria/Images/UI/PanelBackground", AssetRequestMode.ImmediateLoad);
            ModIcon = new(DrawModIcon, dummyTexture);
            ModIcon.Left.Percent = 0f;
            ModIcon.Top.Percent = 0f;
            ModIcon.Width.Pixels = 80f;
            ModIcon.Height.Pixels = 80f;
            ModIcon.ScaleToFit = true;
            return ModIcon;
        }

        private static void DrawModIcon(Texture2D texture, Vector2 drawPosition, Rectangle? rectangle, Color color, float rotation, Vector2 origin, Vector2 scale)
        {
            Main.spriteBatch.End();
            Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, Main.DefaultSamplerState,
                DepthStencilState.None, RasterizerState.CullCounterClockwise, null, Main.UIScaleMatrix);

            Vector2 uiDrawPosition = Vector2.Transform(drawPosition, Main.UIScaleMatrix);
            Vector2 uiDrawScale = Vector2.Transform(Vector2.One * 80f, Main.UIScaleMatrix);
            Rectangle oldScissorRectangle = Main.instance.GraphicsDevice.ScissorRectangle;

            int bottom = Main.instance.GraphicsDevice.ScissorRectangle.Bottom;
            Rectangle newCutoutRectangle = new Rectangle((int)uiDrawPosition.X + 2, (int)uiDrawPosition.Y + 4,
                (int)uiDrawScale.X - 6, (int)uiDrawScale.Y - 14);

            if (newCutoutRectangle.Bottom > bottom)
                newCutoutRectangle.Height += bottom - newCutoutRectangle.Bottom;

            int distanceAboveThreshold = oldScissorRectangle.Y - newCutoutRectangle.Y;
            if (distanceAboveThreshold >= 1)
            {
                newCutoutRectangle.Y += distanceAboveThreshold;
                newCutoutRectangle.Height -= distanceAboveThreshold;
            }

            if (newCutoutRectangle.Height >= 1)
            {
                Main.instance.GraphicsDevice.ScissorRectangle = newCutoutRectangle;

                DrawSkyBackground(drawPosition);
                DrawMainIcon(drawPosition);
                DrawLifeStarOverlay(drawPosition);

                Main.instance.GraphicsDevice.ScissorRectangle = oldScissorRectangle;
            }

            Main.spriteBatch.End();
            Main.spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend, SamplerState.LinearClamp,
                DepthStencilState.None, RasterizerState.CullCounterClockwise, null, Main.UIScaleMatrix);
        }

        private static void DrawSkyBackground(Vector2 drawPosition)
        {
            var skyTexture = ModContent.Request<Texture2D>("ssm/Assets/MutantTestSky", AssetRequestMode.ImmediateLoad);
            Main.spriteBatch.Draw(
                skyTexture.Value,
                drawPosition,
                null,
                Color.White,
                0f,
                Vector2.Zero,
                1f,
                SpriteEffects.None,
                0f
            );
        }

        private static void DrawMainIcon(Vector2 drawPosition)
        {
            var iconTexture = ModContent.Request<Texture2D>("ssm/Assets/ModIconMutant", AssetRequestMode.ImmediateLoad);
            Main.spriteBatch.Draw(
                iconTexture.Value,
                drawPosition,
                null,
                Color.White * 0.9f, 
                0f,
                Vector2.Zero,
                1f,
                SpriteEffects.None,
                0f
            );
        }

        private static void DrawLifeStarOverlay(Vector2 drawPosition)
        {
            var lifeStarTexture = ModContent.Request<Texture2D>("ssm/Assets/LifeStar", AssetRequestMode.ImmediateLoad);
            Vector2 offset = new Vector2(-10f, -10f); 
            float scale = 0.6f; 

            Main.spriteBatch.Draw(
                lifeStarTexture.Value,
                drawPosition + offset,
                null,
                Color.White,
                0f,
                Vector2.Zero,
                scale,
                SpriteEffects.None,
                0f
            );
        }
    }
}